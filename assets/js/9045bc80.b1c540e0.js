"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[515],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(m,i(i({ref:t},f),{},{components:n})):r.createElement(m,i({ref:t},f))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={id:"interfaces",title:"Interfaces",sidebar_label:"Interfaces"},s=void 0,l={unversionedId:"interfaces",id:"interfaces",title:"Interfaces",description:"Interfaces work much the same as Rust's trait system. Interfaces are a list of required methods, and can be implemented by any struct. Even structs defined externally can have interfaces added (although duplicate interface implementations will throw an error).",source:"@site/docs/interfaces.md",sourceDirName:".",slug:"/interfaces",permalink:"/catlang/docs/interfaces",draft:!1,editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/interfaces.md",tags:[],version:"current",frontMatter:{id:"interfaces",title:"Interfaces",sidebar_label:"Interfaces"},sidebar:"docs",previous:{title:"Enums",permalink:"/catlang/docs/enums"},next:{title:"Iterators",permalink:"/catlang/docs/iterators"}},f={},p=[{value:"Interfaces on Type Unions",id:"interfaces-on-type-unions",level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Interfaces work much the same as Rust's trait system. Interfaces are a list of required methods, and can be implemented by any struct. Even structs defined externally can have interfaces added (although duplicate interface implementations will throw an error)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"interface ICollection<T> {\n  function operator[](this, index: int)\n}\n\nimpl<T> ICollection<T> for ([]T | [..]T) {\n\n}\n")),(0,o.kt)("h2",{id:"interfaces-on-type-unions"},"Interfaces on Type Unions"),(0,o.kt)("p",null,"Implementing an interface for a type union implements the interface for all types in the union."))}d.isMDXComponent=!0}}]);