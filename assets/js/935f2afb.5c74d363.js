"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Catlang","items":[{"type":"link","label":"Introduction","href":"/catlang/docs/","docId":"what-and-why"}],"collapsed":false,"collapsible":false},{"type":"category","label":"Setup","items":[{"type":"link","label":"Installation","href":"/catlang/docs/installation","docId":"installation"},{"type":"link","label":"Editor Plugins","href":"/catlang/docs/editor-plugins","docId":"editor-plugins"}],"collapsed":false,"collapsible":false},{"type":"category","label":"Language Basics","items":[{"type":"link","label":"Overview","href":"/catlang/docs/overview","docId":"overview"},{"type":"link","label":"Syntax","href":"/catlang/docs/syntax","docId":"syntax"},{"type":"link","label":"Types","href":"/catlang/docs/types","docId":"types"},{"type":"link","label":"Arrays","href":"/catlang/docs/arrays","docId":"arrays"},{"type":"link","label":"Method Calls","href":"/catlang/docs/method-calls","docId":"method-calls"},{"type":"link","label":"Control Flow","href":"/catlang/docs/control-flow","docId":"control-flow"},{"type":"link","label":"Variables","href":"/catlang/docs/variables","docId":"variables"},{"type":"link","label":"Functions","href":"/catlang/docs/functions","docId":"functions"},{"type":"link","label":"Structs","href":"/catlang/docs/structs","docId":"structs"},{"type":"link","label":"Unions","href":"/catlang/docs/unions","docId":"unions"},{"type":"link","label":"Enums","href":"/catlang/docs/enums","docId":"enums"},{"type":"link","label":"Interfaces","href":"/catlang/docs/interfaces","docId":"interfaces"},{"type":"link","label":"Iterators","href":"/catlang/docs/iterators","docId":"iterators"},{"type":"link","label":"Casting","href":"/catlang/docs/casting","docId":"casting"},{"type":"link","label":"Generics","href":"/catlang/docs/generics","docId":"generics"},{"type":"link","label":"Error Handling","href":"/catlang/docs/error-handling","docId":"error-handling"},{"type":"link","label":"Project Structure","href":"/catlang/docs/project-structure","docId":"project-structure"},{"type":"link","label":"Interop","href":"/catlang/docs/interop","docId":"interop"},{"type":"link","label":"Build System","href":"/catlang/docs/build-system","docId":"build-system"},{"type":"link","label":"Grammar","href":"/catlang/docs/grammar","docId":"grammar"}],"collapsed":false,"collapsible":false}],"api":[{"type":"category","label":"Index","items":[{"type":"link","label":"Index","href":"/catlang/docs/api","docId":"api"}],"collapsed":false,"collapsible":false}]},"docs":{"api":{"id":"api","title":"Index","description":"print(str)","sidebar":"api"},"arrays":{"id":"arrays","title":"Arrays","description":"Catlang\'s arrays differ from C-style arrays in that they contain information about their length (see C\'s Biggest Mistake).","sidebar":"docs"},"build-system":{"id":"build-system","title":"Build System","description":"Catlang is designed to scale well from small files to large projects. The CLI can be used to build a single file; Catlang will attempt to locate all files imported by that entry point, and so on, until all required files have been read.","sidebar":"docs"},"casting":{"id":"casting","title":"Casting","description":"Casting is a way to check the type of an instance or to treat an instance of one type as another.","sidebar":"docs"},"control-flow":{"id":"control-flow","title":"Control Flow","description":"Truth","sidebar":"docs"},"editor-plugins":{"id":"editor-plugins","title":"Editor Plugins","description":"Hello, world!","sidebar":"docs"},"enums":{"id":"enums","title":"Enums","description":"Defining an Enum","sidebar":"docs"},"error-handling":{"id":"error-handling","title":"Error Handling","description":"Syntax Errors","sidebar":"docs"},"functions":{"id":"functions","title":"Functions","description":"Functions can be defined in a C-like fashion:","sidebar":"docs"},"generics":{"id":"generics","title":"Generics","description":"Generics look similar to generics in other languages:","sidebar":"docs"},"grammar":{"id":"grammar","title":"Grammar","description":"EBNF","sidebar":"docs"},"installation":{"id":"installation","title":"Installation","description":"Hello, world!","sidebar":"docs"},"interfaces":{"id":"interfaces","title":"Interfaces","description":"Interfaces work much the same as Rust\'s trait system. Interfaces are a list of required methods, and can be implemented by any struct. Even structs defined externally can have interfaces added (although duplicate interface implementations will throw an error).","sidebar":"docs"},"interop":{"id":"interop","title":"Interop","description":"C FFI","sidebar":"docs"},"iterators":{"id":"iterators","title":"Iterators","description":"Something","sidebar":"docs"},"method-calls":{"id":"method-calls","title":"Method Calls","description":"Methods are performed using a traditional syntax:","sidebar":"docs"},"overview":{"id":"overview","title":"Overview","description":"Catlang is a low-level, data-oriented programming language.","sidebar":"docs"},"project-structure":{"id":"project-structure","title":"Project Structure","description":"Catlang is comprised of scripts and modules declared in different files. A catlang file containing a top-level import or export is considered a module. A file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).","sidebar":"docs"},"structs":{"id":"structs","title":"Structs","description":"Defining a Struct","sidebar":"docs"},"syntax":{"id":"syntax","title":"Syntax","description":"Comments","sidebar":"docs"},"types":{"id":"types","title":"Types","description":"Catlang is statically-typed; every expression has a type.","sidebar":"docs"},"unions":{"id":"unions","title":"Unions","description":"Types can be composed through unions; this means that a value can be one of the listed types. For example:","sidebar":"docs"},"variables":{"id":"variables","title":"Variables","description":"Scope","sidebar":"docs"},"what-and-why":{"id":"what-and-why","title":"Introduction","description":"Catlang is a systems programming language with a C-like syntax that compiles to native code. It is statically typed, and does not include automatic memory management.","sidebar":"docs"}}}')}}]);