"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],c={id:"method-calls",title:"Method Calls",sidebar_label:"Method Calls"},s=void 0,i={unversionedId:"method-calls",id:"method-calls",title:"Method Calls",description:"Methods are performed using a traditional syntax:",source:"@site/docs/method-calls.md",sourceDirName:".",slug:"/method-calls",permalink:"/catlang/docs/method-calls",draft:!1,editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/method-calls.md",tags:[],version:"current",frontMatter:{id:"method-calls",title:"Method Calls",sidebar_label:"Method Calls"},sidebar:"docs",previous:{title:"Arrays",permalink:"/catlang/docs/arrays"},next:{title:"Control Flow",permalink:"/catlang/docs/control-flow"}},p={},u=[{value:"Instance Method Calls",id:"instance-method-calls",level:2},{value:"Static Method Calls",id:"static-method-calls",level:2},{value:"Operators",id:"operators",level:2},{value:"Subscript Operator",id:"subscript-operator",level:3},{value:"Deconstruction Operator",id:"deconstruction-operator",level:3},{value:"Casting Operator",id:"casting-operator",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Methods are performed using a traditional syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"myFunction(arguments);\n")),(0,o.kt)("h2",{id:"instance-method-calls"},"Instance Method Calls"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"const v1 = Vector3;\nconst v2 = v1.double();\n")),(0,o.kt)("h2",{id:"static-method-calls"},"Static Method Calls"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"const v1 = Vector3;\nconst v2 = Vector3;\nconst dot = Vector3::dot(v1, v2);\n")),(0,o.kt)("h2",{id:"operators"},"Operators"),(0,o.kt)("p",null,"Catlang supports operator overloading for a variety of arithmetic operators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\nfunction Vector2::operator +(this, rhs: Vector2) -> Vector2 {\n  return Vector2 {\n    x: lhs.x + rhs.x,\n    y: lhs.y + rhs.y\n  };\n}\n\nlet v1: Vector2;\nlet v2: Vector2;\nlet v3 = v1 + v2;\n")),(0,o.kt)("p",null,"Operator overloads ",(0,o.kt)("em",{parentName:"p"},"cannot")," be static functions."),(0,o.kt)("h3",{id:"subscript-operator"},"Subscript Operator"),(0,o.kt)("p",null,"In addition to common operators, catlang also supports overloading the ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," subscript operator. This allows developers to create custom collections that can be accessed just like arrays."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\n\nfunction Vector2::operator [](this, index: int) -> float {\n  if (index == 0) return v.x;\n  else return v.y;\n}\nfunction Vector2::operator []=(this, index: int, value: float) {\n  if (index == 0) v.x = value;\n  else v.y = value;\n}\n\nlet example = Vector2 { x: 1.0, y: 2.0 };\nlet xval = example[0]; // 1.0\nexample[1] = 3.0; // Vector2 { x: 1.0, y: 3.0 };\n")),(0,o.kt)("h3",{id:"deconstruction-operator"},"Deconstruction Operator"),(0,o.kt)("p",null,"Catlang allows deconstruction of structs that implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"deconstruct")," operator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\n\nfunction Vector2::operator deconstruct(this) -> (float, float) {\n  return (v.x, v.y);\n}\n\nlet example = Vector2 { x: 1.0, y: 2.0 };\nlet (a, b) = example; // a is 1.0, b is 2.0\n")),(0,o.kt)("h3",{id:"casting-operator"},"Casting Operator"),(0,o.kt)("p",null,"To create a user-defined cast, you can overload the casting operator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\nstruct Vector3 {\n  x: float,\n  y: float,\n  z: float\n}\n\nfunction Vector3::operator Vector2(v: Vector3) -> Vector2 {\n  return Vector2 {\n    x: v.x,\n    y: v.y\n  };\n}\n\nlet x = Vector3 {\n  x: 1.0,\n  y: 2.0,\n  z: 3.0\n};\nlet y = x as Vector2; // Vector2 { x: 1.0, y: 2.0 }\n")))}m.isMDXComponent=!0}}]);