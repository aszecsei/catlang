"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[214],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),h=o,f=u["".concat(s,".").concat(h)]||u[h]||m[h]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={title:"Hello, World!",author:"Alic Szecsei",authorURL:"https://alic-szecsei.com/",authorImageURL:"https://alic-szecsei.com/img/profile2.png"},s=void 0,c={permalink:"/catlang/blog/2018/10/17/hello-world",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/blog/2018-10-17-hello-world.md",source:"@site/blog/2018-10-17-hello-world.md",title:"Hello, World!",description:"While much of Catlang is progressing nicely (the grammar is almost entirely fleshed out!) there have been a few setbacks. Namely, we're switching from Go to Rust - which is a net positive, but requires re-writing some of the existing code.",date:"2018-10-17T00:00:00.000Z",formattedDate:"October 17, 2018",tags:[],readingTime:.81,hasTruncateMarker:!0,authors:[{name:"Alic Szecsei",url:"https://alic-szecsei.com/",imageURL:"https://alic-szecsei.com/img/profile2.png"}],frontMatter:{title:"Hello, World!",author:"Alic Szecsei",authorURL:"https://alic-szecsei.com/",authorImageURL:"https://alic-szecsei.com/img/profile2.png"},prevItem:{title:"Roadmap",permalink:"/catlang/blog/2018/12/16/roadmap"}},p={authorsImageUrls:[void 0]},m=[{value:"Why Switch?",id:"why-switch",level:2}],u={toc:m};function h(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"While much of Catlang is progressing nicely (the grammar is almost entirely fleshed out!) there have been a few setbacks. Namely, we're switching from Go to Rust - which is a net positive, but requires re-writing some of the existing code."),(0,a.kt)("h2",{id:"why-switch"},"Why Switch?"),(0,a.kt)("p",null,"This mostly has to do with the AST. Go has some strange notions with regards to inheritance - namely, that interfaces are used exclusively. So in order to create a type of ",(0,a.kt)("inlineCode",{parentName:"p"},"Declaration"),", we have to construct an interface ",(0,a.kt)("inlineCode",{parentName:"p"},"Declaration")," which requires its members to implement a function ",(0,a.kt)("inlineCode",{parentName:"p"},"declaration()"),'; then all "subclasses" of ',(0,a.kt)("inlineCode",{parentName:"p"},"Declaration")," just implement that empty function."),(0,a.kt)("p",null,"Not optimal, and as we progress further into the parser and IR, these shortcomings are going to become more and more of a problem. So we're cutting the problem off at the pass and using Rust; it has the features of Go that were very helpful (package management, unicode support) and keeps a more traditional, useful inheritance model."))}h.isMDXComponent=!0}}]);