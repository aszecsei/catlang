"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[649],{3905:(n,t,e)=>{e.d(t,{Zo:()=>u,kt:()=>f});var r=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var s=r.createContext({}),l=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},u=function(n){var t=l(n.components);return r.createElement(s.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),d=l(e),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return e?r.createElement(m,i(i({ref:t},u),{},{components:e})):r.createElement(m,i({ref:t},u))}));function f(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var o=e.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=n,c.mdxType="string"==typeof n?n:a,i[1]=c;for(var l=2;l<o;l++)i[l]=e[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},8933:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=e(7462),a=e(3366),o=(e(7294),e(3905)),i=["components"],c={id:"functions",title:"Functions",sidebar_label:"Functions"},s=void 0,l={unversionedId:"functions",id:"functions",title:"Functions",description:"Functions can be defined in a C-like fashion:",source:"@site/docs/functions.md",sourceDirName:".",slug:"/functions",permalink:"/catlang/docs/functions",draft:!1,editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/functions.md",tags:[],version:"current",frontMatter:{id:"functions",title:"Functions",sidebar_label:"Functions"},sidebar:"docs",previous:{title:"Variables",permalink:"/catlang/docs/variables"},next:{title:"Structs",permalink:"/catlang/docs/structs"}},u={},p=[{value:"Overloading",id:"overloading",level:2},{value:"Global Functions",id:"global-functions",level:2},{value:"Static Functions",id:"static-functions",level:2},{value:"Instance Functions",id:"instance-functions",level:2}],d={toc:p};function f(n){var t=n.components,e=(0,a.Z)(n,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Functions can be defined in a C-like fashion:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"function timesTwo(num: int) -> int {\n  return num * 2;\n}\n")),(0,o.kt)("p",null,"They can also be defined in a more functional style:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"const timesTwo = (num: int) -> int {\n  return num * 2;\n}\n")),(0,o.kt)("p",null,"If a function does not return a value, the specified return type should be ",(0,o.kt)("inlineCode",{parentName:"p"},"void")," (although, as with most return types, this can simply be inferred from the function itself)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},'function doSomething() -> void {\n  print("Hello, world!")\n}\n')),(0,o.kt)("h2",{id:"overloading"},"Overloading"),(0,o.kt)("p",null,"In catlang, a function defined via the ",(0,o.kt)("inlineCode",{parentName:"p"},"function")," syntax may be overloaded:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},'function printMe() -> void {\n  print("Hello");\n}\nfunction printMe(times: int) -> void {\n  for (i = 0; i < times; ++i) {\n    printMe();\n  }\n}\n')),(0,o.kt)("p",null,"A function declared using lambda-style syntax, may not be overloaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},'const printMe = () -> {\n  print("Hello");\n}\nconst printMe = (times: int) -> { // ERROR: Re-definition of constant!\n  for (i = 0; i < times; ++i) {\n    printMe();\n  }\n}\n')),(0,o.kt)("h2",{id:"global-functions"},"Global Functions"),(0,o.kt)("p",null,"Global functions are defined without any namespace."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"const timesTwo = (num: int) -> {\n  return num * 2;\n}\nconst value = timesTwo(4);\n")),(0,o.kt)("h2",{id:"static-functions"},"Static Functions"),(0,o.kt)("p",null,"Static functions are attached to a struct, but not an instance of that struct. They ",(0,o.kt)("em",{parentName:"p"},"cannot")," use the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," in their parameter list."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"// C-style\nfunction Vector3::dot(first: Vector3, second: Vector3) -> {\n  return first.x * second.x + first.y * second.y + first.z * second.z;\n}\n\n// Functional-style\nVector3::dot = (first: Vector3, second: Vector3) -> {\n  return first.x * second.x + first.y * second.y + first.z * second.z;\n}\n\n// Usage\nconst v1 = Vector3;\nconst v2 = Vector3;\nconst dot = Vector3::dot(v1, v2);\n")),(0,o.kt)("h2",{id:"instance-functions"},"Instance Functions"),(0,o.kt)("p",null,"Instance functions are attached to an instance of a struct. They ",(0,o.kt)("em",{parentName:"p"},"must")," include the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," as their first parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},'// C-style\nfunction Vector3::toString(this) -> {\n  return "(${this.x}, ${this.y}, ${this.z})";\n}\n\n// Functional-style\nVector3::toString = (this) -> {\n  return "(${this.x}, ${this.y}, ${this.z})";\n}\n\n// Usage\nconst v1 = Vector3;\nprint(v1.toString());\n')),(0,o.kt)("p",null,"Functions attached to a struct, whether static or instance, are treated as immutable and cannot be redefined, only overloaded."))}f.isMDXComponent=!0}}]);