"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[252],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7918:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={id:"unions",title:"Unions",sidebar_label:"Unions"},s=void 0,p={unversionedId:"unions",id:"unions",title:"Unions",description:"Types can be composed through unions; this means that a value can be one of the listed types. For example:",source:"@site/docs/unions.md",sourceDirName:".",slug:"/unions",permalink:"/catlang/docs/unions",draft:!1,editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/unions.md",tags:[],version:"current",frontMatter:{id:"unions",title:"Unions",sidebar_label:"Unions"},sidebar:"docs",previous:{title:"Structs",permalink:"/catlang/docs/structs"},next:{title:"Enums",permalink:"/catlang/docs/enums"}},c={},u=[{value:"Type Union Propagation",id:"type-union-propagation",level:2}],m={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Types can be composed through unions; this means that a value can be one of the listed types. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"const falseIfEven = (num: int) -> bool | int {\n  if (num % 2 == 0) {\n    return false;\n  }\n  return num;\n}\n")),(0,o.kt)("h2",{id:"type-union-propagation"},"Type Union Propagation"),(0,o.kt)("p",null,"Most type operators (the pointer-to operator ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),", for example) propagate through type unions; that is, the following are equivalent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"type a = *(x | y);\ntype b = *x | *y;\n")),(0,o.kt)("p",null,"However, the array-of operator (",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),") is not equivalent when propagated. It is, instead, contained:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"type a = [](x | y); // not contained in b\ntype b = []x | []y; // contained in a\n")),(0,o.kt)("p",null,"In this example, ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," is contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),", but they are not equivalent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"let c: [](float | int) = [] { 1, 2.4 }; // OK\nlet d: []float | []int = [] { 1, 2.4 }; // ERROR\n")),(0,o.kt)("p",null,"This has some implications for implicit casting to type unions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-catlang"},"function sum1(arr: [](int | float)) -> float {\n  let res: float = 0;\n  for (num in arr) {\n    res += num as float;\n  }\n  return res;\n}\n\nlet arr1 = []float { 2.4, 1.2 };\nlet arr1sum = sum1(arr1); // OK\n\nfunction sum2(arr: []int | []float) -> float {\n  let res: float = 0;\n  for (num in arr) {\n    res += num as float;\n  }\n  return res;\n}\nlet arr2 = [](int | float) { 2, 2.4 };\nlet arr2sum = sum2(arr2); // ERROR: Array is not either an array of floats or an array of ints\n")),(0,o.kt)("p",null,"The typically-desired behavior is the former. This behavior is what occurs when a developer creates a type definition for a type union and then creates an array of that type definition; this is the recommended practice, to avoid unintended behavior."))}f.isMDXComponent=!0}}]);